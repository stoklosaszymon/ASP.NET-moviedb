
<style>
    * {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
    }

    .col1 {
        margin: 10px 0 0 10px;
        display: flex;
        position: relative;
        flex-direction: column;
        width: 300px;
    }

    .suggestions {
        position: absolute;
        top: 100%;
        width: 100%;
        display: none;
        list-style-type: none;
        flex-direction: column;
        border-top: none;
        background-color: white;
        width: 350px;
        overflow-y: auto;
        height: 200px;
        flex-direction: column;
    }

    input:focus ~ #suggestions {
        display: flex;
    }

    #suggestions:hover {
        display: flex;
    }

    .suggestionsTop {
        position: absolute;
        top: 100%;
        width: 100%;
        display: none;
        list-style-type: none;
        border-top: none;
        background-color: white;
        width: 350px;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
        overflow: hidden;
        height: 320px;
    }

    .suggestions div:hover {
        background: #d3d3d3;
        cursor: pointer;
    }

    .suggestions::-webkit-scrollbar {
        width: 0 !important
    }

    .suggestions {
        -ms-overflow-style: none;
    }
</style>

<div class="col1">
    <form action="~/Movies/InfoPost" method="post" name="movieForm">
        <input class="search" placeholder="Movie title" type="text" id="search" name="title" value="">
        <div id="suggestions"></div>
    </form>
</div>

<script>
    (() => {
        let searchDB = [];
        let topRated = [];

        fetch( "@Url.Action("GetAllMoviesJson", "Movies")", { method: "GET" } )
        .then(e => e.json())
        .then(e => searchDB = Array.from(e).map(el => el.Title))

        fetch( "@Url.Action("GetTopRatedMoviesJson", "Movies", new { count = 6 })", { method: "GET" } )
        .then(e => e.json())
        .then(e => topRated = Array.from(e).map(
            ({ Title, Poster }) => {
                return { Poster, Title }
            }))

        const input = document.getElementById("search");
        const suggestionContainer = document.getElementById("suggestions");

        input.addEventListener('click', () => {
            suggestionContainer.style["dispaly"] = "flex";
        })

         input.addEventListener("input", () => {
             const value = input.value;

             while (suggestionContainer.firstChild) {
                  suggestionContainer.removeChild(suggestionContainer.firstChild);
             }


             if (value.length) {
                 suggestionContainer.classList.toggle("suggestionsTop", false);
                 suggestionContainer.classList.toggle("suggestions", true);

                 const suggestions = searchDB.filter( el =>
                     el.match(input.value)
                 );

                 if (suggestions.length == 1) {
                     suggestionContainer.style["height"] = "120px";
                 }
                 else if (suggestions.length == 0) {
                     suggestionContainer.style["height"] = "0px";
                 }
                 else {
                     suggestionContainer.style["height"] = "240px";
                 }

                 for (let item of suggestions) {
                     let suggestionElement = document.createElement("div");

                     suggestionElement.addEventListener('click', () => {
                         input.value = item;
                         document.forms["movieForm"].submit();
                     })

                     fetch('@Url.Action("SearchBarTile", "SearchBar")', {
                         method: "POST",
                         body: JSON.stringify({ title: item }),
                         headers: {
                             'Content-Type': 'application/json',
                             // 'Content-Type': 'application/x-www-form-urlencoded',
                         },
                     }).then(data => data.text())
                     .then( data => suggestionElement.innerHTML = data)

                     suggestionContainer.appendChild(suggestionElement);
                 }
             }
             else {
                 suggestionContainer.classList.toggle("suggestions", false);
                 suggestionContainer.classList.toggle("suggestionsTop", true);
                 suggestionContainer.style["height"] = "320px";

                 for (let item of topRated) {
                     let topRatedElement = document.createElement("img");
                     topRatedElement.style["margin"] = "5px 5px 5px 5px";

                     topRatedElement.src = item.Poster;
                     topRatedElement.alt = "img";
                     topRatedElement.width = 100;
                     topRatedElement.height = 150;

                     topRatedElement.addEventListener('click', () => {
                         input.value = item.Title;
                         document.forms["movieForm"].submit();
                     })

                     suggestionContainer.appendChild(topRatedElement);
                 }
             }
         });
        })();

</script>